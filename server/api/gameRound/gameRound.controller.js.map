{"version":3,"sources":["../../../../server/api/gameRound/gameRound.controller.js"],"names":[],"mappings":";;;;;;;;;AASA,YAAY,CAAC;;;;;;;;;;;sBAEC,QAAQ;;;;8BACA,mBAAmB;;;;AAEzC,SAAS,iBAAiB,CAAC,GAAG,EAAE,UAAU,EAAE;AAC1C,YAAU,GAAG,UAAU,IAAI,GAAG,CAAC;AAC/B,SAAO,UAAS,MAAM,EAAE;AACtB,QAAI,MAAM,EAAE;AACV,SAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACrC;GACF,CAAC;CACH;;AAED,SAAS,oBAAoB,CAAC,GAAG,EAAE;AACjC,SAAO,UAAS,MAAM,EAAE;AACtB,QAAI,CAAC,MAAM,EAAE;AACX,SAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;AACtB,aAAO,IAAI,CAAC;KACb;AACD,WAAO,MAAM,CAAC;GACf,CAAC;CACH;;AAED,SAAS,WAAW,CAAC,GAAG,EAAE,UAAU,EAAE;AACpC,YAAU,GAAG,UAAU,IAAI,GAAG,CAAC;AAC/B,SAAO,UAAS,GAAG,EAAE;AACnB,OAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;GAClC,CAAC;CACH;;AAEM,SAAS,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE;AAClC,SAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACtB,8BAAU,cAAc,CAAC,CAAE;AACzB,UAAM,EAAE;AACJ,SAAG,EAAE,SAAS;AACd,WAAK,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE;KACjB;GACJ,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,SACtB,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;CAChC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DM,SAAS,MAAM,CAAC,GAAG,EAAC,QAAQ,EAAE;AACjC,MAAI,OAAO,GAAG;AACV,UAAM,EAAC,GAAG,CAAC,MAAM;AACjB,OAAG,EAAC,GAAG,CAAC,GAAG;AACX,WAAO,EAAC,GAAG,CAAC,OAAO;AACnB,YAAQ,EAAC,GAAG,CAAC,QAAQ;AACrB,OAAG,EAAC,GAAG,CAAC,GAAG;AACX,QAAI,EAAC,GAAG,CAAC,IAAI;AACb,UAAM,EAAC,GAAG,CAAC,MAAM;AACjB,WAAO,EAAC,GAAG,CAAC,OAAO;AACnB,UAAM,EAAC,GAAG,CAAC,IAAI;GAClB,CAAA;;AAED,8BAAU,MAAM,CAAC,OAAO,EAAC,QAAQ,CAAC,CAAC;CACtC;;AACM,SAAS,sBAAsB,CAAC,GAAG,EAAC,QAAQ,EAAC;AAChD,8BAAU,OAAO,CAAC;AACd,UAAM,EAAC,GAAG,CAAC,MAAM;AACjB,QAAI,EAAC,GAAG,CAAC,IAAI;GAChB,EAAE,IAAI,EAAE,EAAC,IAAI,EAAE,EAAC,SAAS,EAAE,CAAC,CAAC,EAAE,EAAC,EAAE,UAAS,GAAG,EAAC,KAAK,EAAC;AAClD,QAAG,GAAG,EAAC;AACH,cAAQ,CAAC,GAAG,EAAC,KAAK,CAAC,CAAA;KACtB,MACI,IAAG,KAAK,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,KAAK,KAAK,EAAC;AAChE,cAAQ,CAAC,GAAG,EAAC,KAAK,CAAC,CAAA;KACtB,MAAI;AACD,cAAQ,CAAC,SAAS,EAAC,SAAS,CAAC,CAAC;KACjC;GACJ,CAAC,CAAC;CACN","file":"gameRound.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/gameRounds              ->  index\n * POST    /api/gameRounds              ->  create\n * GET     /api/gameRounds/:id          ->  show\n * PUT     /api/gameRounds/:id          ->  update\n * DELETE  /api/gameRounds/:id          ->  destroy\n */\n\n'use strict';\n\nimport _ from 'lodash';\nimport GameRound from './gameRound.model';\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if (entity) {\n      res.status(statusCode).json(entity);\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if (!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    res.status(statusCode).send(err);\n  };\n}\n\nexport function countRounds(req, res) {\n    console.log(\"frrr\");\n  GameRound.aggregateAsync([ { \n    $group: { \n        _id: \"$action\", \n        count: { $sum: 1 }\n        } \n    }]).then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n/*\nfunction saveUpdates(updates) {\n  return function(entity) {\n    var updated = _.merge(entity, updates);\n    return updated.saveAsync()\n      .spread(updated => {\n        return updated;\n      });\n  };\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if (entity) {\n      return entity.removeAsync()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\n\n// Gets a single GameRound from the DB\nexport function show(req, res) {\n  GameRound.findByIdAsync(req.params.id)\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Creates a new GameRound in the DB\nexport function create(req, res) {\n  GameRound.createAsync(req.body)\n    .then(respondWithResult(res, 201))\n    .catch(handleError(res));\n}\n\n// Updates an existing GameRound in the DB\nexport function update(req, res) {\n  if (req.body._id) {\n    delete req.body._id;\n  }\n  GameRound.findByIdAsync(req.params.id)\n    .then(handleEntityNotFound(res))\n    .then(saveUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Deletes a GameRound from the DB\nexport function destroy(req, res) {\n  GameRound.findByIdAsync(req.params.id)\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}\n*/\nexport function insert(obj,callback) {\n    var initObj = {\n        userId:obj.userId,\n        bet:obj.bet,\n        balance:obj.balance,\n        currency:obj.currency,\n        win:obj.win,\n        game:obj.game,\n        action:obj.action,\n        outcome:obj.outcome,\n        isOver:obj.over\n    }\n    \n    GameRound.create(initObj,callback);\n}\nexport function getLastIncompleteRound(obj,callback){\n    GameRound.findOne({\n        userId:obj.userId,\n        game:obj.game\n    }, null, {sort: {updatedAt: -1 }}, function(err,round){\n        if(err){\n            callback(err,round)\n        }\n        else if(round && round.outcome && round.outcome.roundOver === false){\n            callback(err,round)\n        }else{\n            callback(undefined,undefined);\n        }\n    });\n}\n/*\nfunction update(userId,amtToInc,lock,callback) {\n   GameRound.findOneAndUpdate({userId:userId},\n                            {$inc:{balance:amtToInc},$set:{locked:lock}},\n                            {upsert: false,new:true}, \n                            callback);\n}\n*/"]}